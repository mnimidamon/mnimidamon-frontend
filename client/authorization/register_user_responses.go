// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"mnimidamonbackend/models"
)

// RegisterUserReader is a Reader for the RegisterUser structure.
type RegisterUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRegisterUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRegisterUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRegisterUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRegisterUserOK creates a RegisterUserOK with default headers values
func NewRegisterUserOK() *RegisterUserOK {
	return &RegisterUserOK{}
}

/* RegisterUserOK describes a response with status code 200, with default header values.

Authorization successful. Access token and created user response.
*/
type RegisterUserOK struct {
	Payload *models.RegisterResponse
}

func (o *RegisterUserOK) Error() string {
	return fmt.Sprintf("[POST /users][%d] registerUserOK  %+v", 200, o.Payload)
}
func (o *RegisterUserOK) GetPayload() *models.RegisterResponse {
	return o.Payload
}

func (o *RegisterUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RegisterResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserBadRequest creates a RegisterUserBadRequest with default headers values
func NewRegisterUserBadRequest() *RegisterUserBadRequest {
	return &RegisterUserBadRequest{}
}

/* RegisterUserBadRequest describes a response with status code 400, with default header values.

Supplied parameters were not okay.
*/
type RegisterUserBadRequest struct {
	Payload *models.Error
}

func (o *RegisterUserBadRequest) Error() string {
	return fmt.Sprintf("[POST /users][%d] registerUserBadRequest  %+v", 400, o.Payload)
}
func (o *RegisterUserBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RegisterUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserInternalServerError creates a RegisterUserInternalServerError with default headers values
func NewRegisterUserInternalServerError() *RegisterUserInternalServerError {
	return &RegisterUserInternalServerError{}
}

/* RegisterUserInternalServerError describes a response with status code 500, with default header values.

Internal server error.
*/
type RegisterUserInternalServerError struct {
	Payload *models.Error
}

func (o *RegisterUserInternalServerError) Error() string {
	return fmt.Sprintf("[POST /users][%d] registerUserInternalServerError  %+v", 500, o.Payload)
}
func (o *RegisterUserInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *RegisterUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

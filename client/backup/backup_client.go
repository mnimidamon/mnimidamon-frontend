// Code generated by go-swagger; DO NOT EDIT.

package backup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new backup API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for backup API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DownloadBackup(params *DownloadBackupParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*DownloadBackupOK, error)

	GetGroupBackup(params *GetGroupBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGroupBackupOK, error)

	GetGroupBackups(params *GetGroupBackupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGroupBackupsOK, error)

	InitializeGroupBackup(params *InitializeGroupBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InitializeGroupBackupOK, error)

	InitializeGroupBackupDeletion(params *InitializeGroupBackupDeletionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InitializeGroupBackupDeletionAccepted, error)

	LogComputerBackup(params *LogComputerBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LogComputerBackupOK, error)

	RequestBackupUpload(params *RequestBackupUploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestBackupUploadOK, error)

	UploadBackup(params *UploadBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadBackupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DownloadBackup downloads the backup file
*/
func (a *Client) DownloadBackup(params *DownloadBackupParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*DownloadBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downloadBackup",
		Method:             "GET",
		PathPattern:        "/users/current/computers/current/groups/{group_id}/backups/{backup_id}/download",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadBackupReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for downloadBackup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupBackup gets a backup
*/
func (a *Client) GetGroupBackup(params *GetGroupBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGroupBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGroupBackup",
		Method:             "GET",
		PathPattern:        "/users/current/computers/current/groups/{group_id}/backups/{backup_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGroupBackupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupBackup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupBackups gets group backups
*/
func (a *Client) GetGroupBackups(params *GetGroupBackupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGroupBackupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupBackupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGroupBackups",
		Method:             "GET",
		PathPattern:        "/users/current/computers/current/groups/{group_id}/backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGroupBackupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupBackupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupBackups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InitializeGroupBackup initializes a new backup
*/
func (a *Client) InitializeGroupBackup(params *InitializeGroupBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InitializeGroupBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitializeGroupBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "initializeGroupBackup",
		Method:             "POST",
		PathPattern:        "/users/current/computers/current/groups/{group_id}/backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InitializeGroupBackupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InitializeGroupBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for initializeGroupBackup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InitializeGroupBackupDeletion initializes a backup deletion

  If the current user is the owner of the backup then it initializes backup deletion otherwise deletes the logged local computer backup of the current computer.
*/
func (a *Client) InitializeGroupBackupDeletion(params *InitializeGroupBackupDeletionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InitializeGroupBackupDeletionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitializeGroupBackupDeletionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "initializeGroupBackupDeletion",
		Method:             "DELETE",
		PathPattern:        "/users/current/computers/current/groups/{group_id}/backups/{backup_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InitializeGroupBackupDeletionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InitializeGroupBackupDeletionAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for initializeGroupBackupDeletion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LogComputerBackup logs the local computer backup
*/
func (a *Client) LogComputerBackup(params *LogComputerBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LogComputerBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogComputerBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "logComputerBackup",
		Method:             "POST",
		PathPattern:        "/users/current/computers/current/groups/{group_id}/backups/{backup_id}/log",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogComputerBackupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogComputerBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for logComputerBackup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RequestBackupUpload updates the upload request flag
*/
func (a *Client) RequestBackupUpload(params *RequestBackupUploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestBackupUploadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestBackupUploadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "requestBackupUpload",
		Method:             "PUT",
		PathPattern:        "/users/current/computers/current/groups/{group_id}/backups/{backup_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RequestBackupUploadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestBackupUploadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for requestBackupUpload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadBackup uploads the backup file
*/
func (a *Client) UploadBackup(params *UploadBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadBackup",
		Method:             "POST",
		PathPattern:        "/users/current/computers/current/groups/{group_id}/backups/{backup_id}/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadBackupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadBackup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

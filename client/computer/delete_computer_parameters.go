// Code generated by go-swagger; DO NOT EDIT.

package computer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteComputerParams creates a new DeleteComputerParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteComputerParams() *DeleteComputerParams {
	return &DeleteComputerParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteComputerParamsWithTimeout creates a new DeleteComputerParams object
// with the ability to set a timeout on a request.
func NewDeleteComputerParamsWithTimeout(timeout time.Duration) *DeleteComputerParams {
	return &DeleteComputerParams{
		timeout: timeout,
	}
}

// NewDeleteComputerParamsWithContext creates a new DeleteComputerParams object
// with the ability to set a context for a request.
func NewDeleteComputerParamsWithContext(ctx context.Context) *DeleteComputerParams {
	return &DeleteComputerParams{
		Context: ctx,
	}
}

// NewDeleteComputerParamsWithHTTPClient creates a new DeleteComputerParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteComputerParamsWithHTTPClient(client *http.Client) *DeleteComputerParams {
	return &DeleteComputerParams{
		HTTPClient: client,
	}
}

/* DeleteComputerParams contains all the parameters to send to the API endpoint
   for the delete computer operation.

   Typically these are written to a http.Request.
*/
type DeleteComputerParams struct {

	/* ComputerID.

	   Numeric ID of the Computer.
	*/
	ComputerID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete computer params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteComputerParams) WithDefaults() *DeleteComputerParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete computer params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteComputerParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete computer params
func (o *DeleteComputerParams) WithTimeout(timeout time.Duration) *DeleteComputerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete computer params
func (o *DeleteComputerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete computer params
func (o *DeleteComputerParams) WithContext(ctx context.Context) *DeleteComputerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete computer params
func (o *DeleteComputerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete computer params
func (o *DeleteComputerParams) WithHTTPClient(client *http.Client) *DeleteComputerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete computer params
func (o *DeleteComputerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithComputerID adds the computerID to the delete computer params
func (o *DeleteComputerParams) WithComputerID(computerID int64) *DeleteComputerParams {
	o.SetComputerID(computerID)
	return o
}

// SetComputerID adds the computerId to the delete computer params
func (o *DeleteComputerParams) SetComputerID(computerID int64) {
	o.ComputerID = computerID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteComputerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param computer_id
	if err := r.SetPathParam("computer_id", swag.FormatInt64(o.ComputerID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

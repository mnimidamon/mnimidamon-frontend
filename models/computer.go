// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Computer Object that represents an Computer of a User.
//
// swagger:model Computer
type Computer struct {

	// Numeric identificator of the computer.
	// Example: 42
	// Read Only: true
	ComputerID int64 `json:"computer_id,omitempty"`

	// Name of the Computer.
	// Example: storagetron
	// Max Length: 12
	// Min Length: 3
	Name string `json:"name,omitempty"`

	// Numeric identificator of the Owner.
	// Example: 42
	// Read Only: true
	OwnerID int64 `json:"owner_id,omitempty"`
}

// Validate validates this computer
func (m *Computer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Computer) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 12); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this computer based on the context it is used
func (m *Computer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputerID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnerID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Computer) contextValidateComputerID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "computer_id", "body", int64(m.ComputerID)); err != nil {
		return err
	}

	return nil
}

func (m *Computer) contextValidateOwnerID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "owner_id", "body", int64(m.OwnerID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Computer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Computer) UnmarshalBinary(b []byte) error {
	var res Computer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InitializeGroupBackupPayload Payload when you initialize a new group backup
//
// swagger:model InitializeGroupBackupPayload
type InitializeGroupBackupPayload struct {

	// file name
	// Required: true
	// Min Length: 3
	FileName *string `json:"file_name"`

	// hash
	// Required: true
	// Min Length: 1
	Hash *string `json:"hash"`

	// size
	// Required: true
	// Minimum: 1
	Size *int64 `json:"size"`
}

// Validate validates this initialize group backup payload
func (m *InitializeGroupBackupPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InitializeGroupBackupPayload) validateFileName(formats strfmt.Registry) error {

	if err := validate.Required("file_name", "body", m.FileName); err != nil {
		return err
	}

	if err := validate.MinLength("file_name", "body", *m.FileName, 3); err != nil {
		return err
	}

	return nil
}

func (m *InitializeGroupBackupPayload) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("hash", "body", m.Hash); err != nil {
		return err
	}

	if err := validate.MinLength("hash", "body", *m.Hash, 1); err != nil {
		return err
	}

	return nil
}

func (m *InitializeGroupBackupPayload) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	if err := validate.MinimumInt("size", "body", *m.Size, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this initialize group backup payload based on context it is used
func (m *InitializeGroupBackupPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InitializeGroupBackupPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InitializeGroupBackupPayload) UnmarshalBinary(b []byte) error {
	var res InitializeGroupBackupPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfirmDownloadPayload Payload that verifies the backup download by md5 hash
//
// swagger:model ConfirmDownloadPayload
type ConfirmDownloadPayload struct {

	// Hash of the backup file when the prepend_string is prepended to the file contents
	// Example: randomprependstring
	// Required: true
	// Min Length: 4
	Hash *string `json:"hash"`

	// String that is prepended to the file data
	// Example: randomprependstring
	// Required: true
	// Max Length: 100
	// Min Length: 4
	PrependString *string `json:"prepend_string"`
}

// Validate validates this confirm download payload
func (m *ConfirmDownloadPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrependString(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfirmDownloadPayload) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("hash", "body", m.Hash); err != nil {
		return err
	}

	if err := validate.MinLength("hash", "body", *m.Hash, 4); err != nil {
		return err
	}

	return nil
}

func (m *ConfirmDownloadPayload) validatePrependString(formats strfmt.Registry) error {

	if err := validate.Required("prepend_string", "body", m.PrependString); err != nil {
		return err
	}

	if err := validate.MinLength("prepend_string", "body", *m.PrependString, 4); err != nil {
		return err
	}

	if err := validate.MaxLength("prepend_string", "body", *m.PrependString, 100); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this confirm download payload based on context it is used
func (m *ConfirmDownloadPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConfirmDownloadPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfirmDownloadPayload) UnmarshalBinary(b []byte) error {
	var res ConfirmDownloadPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

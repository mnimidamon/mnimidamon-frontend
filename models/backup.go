// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Backup Object that represents a file Backup.
//
// swagger:model Backup
type Backup struct {

	// Numeric identificator of the Backup.
	// Example: 42
	// Read Only: true
	BackupID int64 `json:"backup_id,omitempty"`

	// Owner of the backup requested deletion of this backup.
	// Example: false
	DeleteRequest bool `json:"delete_request,omitempty"`

	// Name of the file.
	// Example: photos.zip
	Filename string `json:"filename,omitempty"`

	// Numeric identificator of the Group that the Backup belongs to.
	// Example: 42
	// Read Only: true
	GroupID int64 `json:"group_id,omitempty"`

	// File sha256 hash.
	// Example: a01568c0dd1668b1e6d92708cc9faaa9816edfd5ac4190d4befbb5f38e45aa2e
	Hash string `json:"hash,omitempty"`

	// The file can be downloaded from server.
	// Example: true
	OnServer bool `json:"on_server,omitempty"`

	// Numeric identificator of the Group Member which owns this backup.
	// Example: 42
	// Read Only: true
	OwnerID int64 `json:"owner_id,omitempty"`

	// Size of the file in MB.
	// Example: 1024
	Size int64 `json:"size,omitempty"`

	// Request to upload to server, mutally exclusive with on_server flag.
	// Example: false
	UploadRequest bool `json:"upload_request,omitempty"`
}

// Validate validates this backup
func (m *Backup) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this backup based on the context it is used
func (m *Backup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroupID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnerID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Backup) contextValidateBackupID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "backup_id", "body", int64(m.BackupID)); err != nil {
		return err
	}

	return nil
}

func (m *Backup) contextValidateGroupID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "group_id", "body", int64(m.GroupID)); err != nil {
		return err
	}

	return nil
}

func (m *Backup) contextValidateOwnerID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "owner_id", "body", int64(m.OwnerID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Backup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Backup) UnmarshalBinary(b []byte) error {
	var res Backup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

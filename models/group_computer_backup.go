// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GroupComputerBackup Object that represents the Computer that has this file Backup stored locally.
//
// swagger:model GroupComputerBackup
type GroupComputerBackup struct {

	// Numeric identificator of the Backup.
	// Example: 42
	// Read Only: true
	BackupID int64 `json:"backup_id,omitempty"`

	// Numeric identificator of the Group Computer that has this file Backup locally stored.
	// Example: 42
	// Read Only: true
	GroupComputerID int64 `json:"group_computer_id,omitempty"`
}

// Validate validates this group computer backup
func (m *GroupComputerBackup) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this group computer backup based on the context it is used
func (m *GroupComputerBackup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroupComputerID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupComputerBackup) contextValidateBackupID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "backup_id", "body", int64(m.BackupID)); err != nil {
		return err
	}

	return nil
}

func (m *GroupComputerBackup) contextValidateGroupComputerID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "group_computer_id", "body", int64(m.GroupComputerID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupComputerBackup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupComputerBackup) UnmarshalBinary(b []byte) error {
	var res GroupComputerBackup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
